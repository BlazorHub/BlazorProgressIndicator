@implements IDisposable

@if (CurrentTask != null && _fragment != null)
{
    @_fragment
}
<div style="@(CurrentTask != null ? CONTENT_HIDDEN : string.Empty)">
    @ChildContent
</div>

@code {
    const string CONTENT_HIDDEN = "display: none;";

    [Parameter] RenderFragment ChildContent { get; set; }

    [Parameter] string Context { get; set; }

    [Parameter] Type TemplateType { get; set; } = Loading.DefaultTemplateType;

    ITaskProgress CurrentTask { get; set; }

    LoadingIndicatorTemplateBase _template;

    RenderFragment _fragment;

    private Action<ITaskProgress> HandleTaskProgressChangedEvent => new Action<ITaskProgress>((ITaskProgress task) =>
    {
        CurrentTask = task;
        if (_template != null)
        {
            _template.CurrentTask = task;
            _template.CallStateHasChanged();
        }
        StateHasChanged();
    });

    protected override void OnInit()
    {
        Loading.SubscribeToTaskProgressChanged(Context, HandleTaskProgressChangedEvent);
        _fragment = new RenderFragment(builder =>
        {
            builder.OpenComponent(0, TemplateType);
            builder.AddComponentReferenceCapture(1, inst =>
            {
                _template = (LoadingIndicatorTemplateBase)inst;
                _template.CurrentTask = CurrentTask;
            });
            builder.CloseComponent();
        });
    }

    public void Dispose()
    {
        Loading.UnsubscribeFromTaskProgressChanged(Context, HandleTaskProgressChangedEvent);
    }
}
