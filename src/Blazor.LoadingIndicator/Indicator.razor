@implements IDisposable

@if (CurrentTask?.Status == TaskStatus.Started && _loadingFragment != null)
{
    @_loadingFragment
}
else if (CurrentTask?.Status == TaskStatus.Failed && ErrorContent != null)
{
    @ErrorContent(CurrentTask.Exception)
}
<div style="@((CurrentTask?.Status == TaskStatus.Succeeded ||
              (CurrentTask?.Status == TaskStatus.Failed && ErrorContent == null) ||
              CurrentTask == null) ? string.Empty : CONTENT_HIDDEN)">
    @ChildContent
</div>

@code {
    private const string CONTENT_HIDDEN = "display: none;";

    [Parameter] private RenderFragment ChildContent { get; set; }

    [Parameter] private RenderFragment<Exception> ErrorContent { get; set; }

    [Parameter] private string Context { get; set; }

    [Parameter] private Type TemplateType { get; set; } = Loading.DefaultTemplateType;

    private ITaskStatus CurrentTask { get; set; }

    private LoadingIndicatorTemplateBase _template;

    private RenderFragment _loadingFragment;

    private Action<ITaskStatus> HandleTaskProgressChangedEvent => new Action<ITaskStatus>((ITaskStatus task) =>
    {
        CurrentTask = task;
        if (_template != null)
        {
            _template.CurrentTask = task;
            _template.CallStateHasChanged();
        }
        StateHasChanged();
    });

    protected override void OnInit()
    {
        Loading.SubscribeToTaskProgressChanged(Context, HandleTaskProgressChangedEvent);
        _loadingFragment = new RenderFragment(builder =>
        {
            builder.OpenComponent(0, TemplateType);
            builder.AddComponentReferenceCapture(1, inst =>
            {
                _template = (LoadingIndicatorTemplateBase)inst;
                _template.CurrentTask = CurrentTask;
            });
            builder.CloseComponent();
        });
    }

    public void Dispose()
    {
        Loading.UnsubscribeFromTaskProgressChanged(Context, HandleTaskProgressChangedEvent);
    }
}
