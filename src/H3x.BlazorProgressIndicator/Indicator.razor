@implements IDisposable
@inject IIndicatorService LoadingService

@if (CurrentTask?.Exception != null && ErrorContent != null)
{
    @ErrorContent(CurrentTask)
}
else if (CurrentTask != null && _loadingFragment != null)
{
    @_loadingFragment
}
<div style="@(((CurrentTask?.Exception != null && ErrorContent == null) ||
              CurrentTask == null) ? string.Empty : CONTENT_HIDDEN)">
    @ChildContent
</div>

@code {    


    private const string CONTENT_HIDDEN = "display: none;";

    [Parameter] public RenderFragment<ITaskStatus> InProgressContent { get; set; }

    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public RenderFragment<ITaskStatus> ErrorContent { get; set; }

    [Parameter] public string Context { get; set; }

    [Parameter] public Type TemplateType { get; set; }

    private ITaskStatus CurrentTask { get; set; }

    private LoadingIndicatorTemplateBase _template;

    private RenderFragment _loadingFragment;

    // https://stackoverflow.com/questions/50188680/add-load-components-dynamically
    RenderFragment InProgressContentCreator() => builder =>
    {
        if (InProgressContent != null)
        {
            builder.AddContent(0, InProgressContent);
        }
        else
        {
            builder.OpenComponent(0, typeof(DefaultTemplate));
            builder.AddAttribute(1, "Title", "Some title");
            builder.CloseComponent();
        }
    };

    private Func<ITaskStatus, Task> HandleTaskProgressChangedEvent => new Func<ITaskStatus, Task>(async (ITaskStatus task) =>
    {
        CurrentTask = task;
        if (_template != null)
        {
            _template.CurrentTask = task;
            await _template.CallStateHasChanged();
        }
        await InvokeAsync(StateHasChanged);
    });

    protected override void OnInitialized()
    {
        if(TemplateType == null) TemplateType = LoadingService.DefaultTemplateType;
        LoadingService.SubscribeToTaskProgressChanged(Context, HandleTaskProgressChangedEvent);
        _loadingFragment = new RenderFragment(builder =>
        {
            builder.OpenComponent(0, TemplateType);
            builder.AddComponentReferenceCapture(1, inst =>
            {
                _template = (LoadingIndicatorTemplateBase)inst;
                _template.CurrentTask = CurrentTask;
            });
            builder.CloseComponent();
        });
    }

    public void Dispose()
    {
        LoadingService.UnsubscribeFromTaskProgressChanged(Context, HandleTaskProgressChangedEvent);
    }
}
