@using Microsoft.AspNetCore.Components.Rendering
@implements IDisposable
@inject IIndicatorService LoadingService

@if (CurrentTask?.Exception != null && ErrorContent != null)
{
    @ErrorContent(CurrentTask)
}
else if (CurrentTask != null)
{
    @InProgressTemplate(CurrentTask)
}
<div style="@(((CurrentTask?.Exception != null && ErrorContent == null) ||
              CurrentTask == null) ? string.Empty : CONTENT_HIDDEN)">
    @ChildContent
</div>

@code {
    private const string CONTENT_HIDDEN = "display: none;";

    [Parameter] public RenderFragment<ITaskStatus> InProgressTemplate { get; set; }

    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public RenderFragment<ITaskStatus> ErrorContent { get; set; }

    [Parameter] public string Context { get; set; }

    [Parameter] public Type TemplateType { get; set; }

    private ITaskStatus CurrentTask { get; set; }

    // https://stackoverflow.com/questions/50188680/add-load-components-dynamically
    RenderFragment<ITaskStatus> InProgressContentCreator() => taskStatus =>
    {
        return new RenderFragment((builder) =>
        {
            if (TemplateType != null)
            {
                builder.OpenComponent(0, TemplateType);
                builder.AddAttribute(0, nameof(IndicatorTemplateBase.CurrentTask), taskStatus);
                builder.CloseComponent();
            }
            else
            {
                builder.OpenComponent(0, typeof(DefaultTemplate));
                builder.AddAttribute(0, nameof(IndicatorTemplateBase.CurrentTask), taskStatus);
                builder.CloseComponent();
            }
        });
    };

    private Func<ITaskStatus, Task> HandleTaskProgressChangedEvent => new Func<ITaskStatus, Task>(async (ITaskStatus task) =>
    {
        CurrentTask = task;
        StateHasChanged();
    });

    protected override void OnInitialized()
    {
        LoadingService.SubscribeToTaskProgressChanged(Context, HandleTaskProgressChangedEvent);
        if (InProgressTemplate == null)
            InProgressTemplate = InProgressContentCreator();

        base.OnInitialized();
    }

    public void Dispose()
    {
        LoadingService.UnsubscribeFromTaskProgressChanged(Context, HandleTaskProgressChangedEvent);
    }
}
