@implements IDisposable
@inject IIndicatorService LoadingService

@if (CurrentTask?.Exception != null && ErrorContent != null)
{
    @ErrorContent(CurrentTask)
}
else if (CurrentTask != null)
{
    @InProgressTemplate
}
<div style="@(((CurrentTask?.Exception != null && ErrorContent == null) ||
              CurrentTask == null) ? string.Empty : CONTENT_HIDDEN)">
    @ChildContent
</div>

@code {    


    private const string CONTENT_HIDDEN = "display: none;";

    [Parameter] public RenderFragment<ITaskStatus> InProgressTemplate { get; set; }

    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public RenderFragment<ITaskStatus> ErrorContent { get; set; }

    [Parameter] public string Context { get; set; }

    [Parameter] public Type TemplateType { get; set; }

    private ITaskStatus CurrentTask { get; set; }

    // https://stackoverflow.com/questions/50188680/add-load-components-dynamically
    RenderFragment InProgressContentCreator() => builder =>
    {
        if (InProgressTemplate != null)
        {
            return;
        }
        else if (InProgressTemplate != null)
        {
            builder.OpenComponent(0, TemplateType);
            builder.CloseComponent();
        }
        else
        {
            builder.OpenComponent(0, typeof(DefaultTemplate));
            builder.CloseComponent();
        }
        builder.
    };

    private Func<ITaskStatus, Task> HandleTaskProgressChangedEvent => new Func<ITaskStatus, Task>(async (ITaskStatus task) =>
    {
        CurrentTask = task;
        //if (_template != null)
        //{
        //    _template.CurrentTask = task;
        //    await _template.CallStateHasChanged();
        //}
        await InvokeAsync(StateHasChanged);
    });

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    public void Dispose()
    {
        LoadingService.UnsubscribeFromTaskProgressChanged(Context, HandleTaskProgressChangedEvent);
    }
}
