@page "/demo"
@inject ILoadingService LoadingService

<h1>OnInit</h1>

<Indicator Context="on-init" TemplateType="@typeof(Rainbow)">
    <p>I'm successfully initialized!</p>
</Indicator>

<hr />

<h1>Table</h1>

<Indicator Context="fake-reload-table" TemplateType="@typeof(Rainbow)">
    <button class="btn btn-primary" @onclick="@FakeReloadTable">Reload</button>
    <table>
        <tr>
            <th style="font-weight:bold !important; color: #666; background-color: #f5f5f5">id</th>
            <th style="font-weight:bold !important; color: #666; background-color: #f5f5f5">first_name</th>
            <th style="font-weight:bold !important; color: #666; background-color: #f5f5f5">last_name</th>
            <th style="font-weight:bold !important; color: #666; background-color: #f5f5f5">email</th>
            <th style="font-weight:bold !important; color: #666; background-color: #f5f5f5">gender</th>
            <th style="font-weight:bold !important; color: #666; background-color: #f5f5f5">ip_address</th>
        </tr>
        <tr>
            <td>1</td>
            <td>Shurlock</td>
            <td>Wooster</td>
            <td>swooster0@mashable.com</td>
            <td>Male</td>
            <td>200.241.168.39</td>
        </tr>
        <tr>
            <td>2</td>
            <td>Sky</td>
            <td>Ottey</td>
            <td>sottey1@rediff.com</td>
            <td>Male</td>
            <td>154.62.59.38</td>
        </tr>
    </table>
</Indicator>

<hr />

<h1>Counter with bug</h1>

<Indicator Context="crashcount" TemplateType="@typeof(Rainbow)">
    <ErrorContent Context="t">
        <p>Error: @t.Exception.Message</p>
        <button class="btn btn-primary" @onclick="t.DismissException">Dismiss</button>
    </ErrorContent>
    <ChildContent>
        <button class="btn btn-primary" @onclick="@StartCrashCount">Start crashing counter</button>
    </ChildContent>
</Indicator>

@functions {
    protected override async Task OnInitializedAsync()
    {
        await LoadingService.StartTaskAsync(async (task) =>
        {
            await Task.Delay(5000);
        }, "on-init", "Initializing", "Please wait ...");
    }

    async Task FakeReloadTable()
    {
        await LoadingService.StartTaskAsync(async (task) =>
        {
            await Task.Delay(3000);
        }, "fake-reload-table", "Loading ...", "Downloading table data");
    }

    async Task StartCrashCount()
    {
        await LoadingService.StartTaskAsync(async (task) =>
        {
            task.Maintext = "Counting ...";
            var i = 0;
            while (i < 20)
            {
                await Task.Delay(250);
                task.Subtext = "Counted: " + i++;
            // bug
            if (i == 12)
                    throw new Exception("Sorry, I can't count higher than 11");
            }
        }, "crashcount");
    }
}
